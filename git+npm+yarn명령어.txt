Git Program 설치
Git 다운받아 설치한다.

<<< Git 명령어 >>>
Help : git help config
git 설정하기

사용자설정 : git config —global user.name “dldkffh”
메일설정 : git config —global user.mail “jjaimsae@gmail.com”
config확인
git config —list
git config user.name
최초 설정 확인 : git config —show-origin user.name
End of Line
시스템설정대로 : git config —global core.eof native
시스템설정대로 : git config —global core.autcrlf false
Diff 결과 Highlighting 하기 : git config -global pager.diff ‘diff-highlight | less’
로컬저장소만들기

mkdir project
cd project
git init
git add *.c
git commit -m “My first version managing directory”
저장소 내려받기

git clone id@원격저장소_URL
git clone /로컬저장소/저장소
File 상태 확인(Tracked : Modified/Unmodified/Staged, Untracked : Unstaged)

git status
git status -s :
: OO filename
: First O - Staging 상태를 보여줌
: Second O - Working directory 상태를 보여줌
: M - Modifyed
: A - Added
: ? - Unstaged
Staging Area file을 Unstage로 변경하기
git reset HEAD filename
git checkout — filename
Tag : 특정 commit에 대해 Tag를 지정 (Version 관리로 주로 사용)

조회
git tag
git tag -l v1.4
git show v1.4
만들기
LghtWeight : git tag v1.5
Annoated : git tag -a v1.5 -m “Version Updated by MC”
이전 commit에 tag 달기 : git tag -a 1.5 commithash
지우기 : git tag -d v1.5
Tag 공유하기 : git push origin v1.5
Branch

조회하기
git branch -v
git branch —merged
git branch —no-merged
만들기 : git branch issues
변경하기 : git checkout issue
만들고 변경하기 : git checkout -b issue
확인하기 : git branch
삭제하기 :
Merged branch : git branch -d issue
No-merged brnach : git branch -D issue
파일만들기 : touch test.txt

파일추적하기 : git add test.txt
파일추적제외하기 : .gitignore 파일에 해당 파일명이나 filter를 적는다.
: *.[oa] - 확장자가 .o 이거나 .s는 무시한다.

Commit

파일변경완료 : git commit -m “add test.txt”
Unstaged file를 바로 commit하기 : git commit -a -m “Version update”
diff결과를 commit message로 사용하기 git commit -v
이전 commit 지우고 새로 등록하기
git commit -m ‘initial commit’
git add forgotten_file
git commit —amend
Commit hash 확인하기 : git log —pretty=oneline
조회하기

git log
git log —pretty=format:”%h %s” —graph
원격저장소

원격저장소 확인하기
git remote -v
git remote show origin
원격저장소 내려받기 : git clone 원격저장소_URL
원격저장소 추가하기 : git add remote origin 저장소이름 원격저장소_URL
Fetch

git fetch origin
Merge

git checkout master
git diff orign master
git merge issue
git branch -d issue
원복하기

파일 원복 : git checkout — filename
Commit 원복
git fetch origin
git reset —hard origin/master
Pull(Fetch + Merge) : git pull

Push : git push origin issue

master로 merge 하고 Pull request 보내기 : 비추천 방식

master branch로 이동 : git checkout master
Merge : git merge issue
Push : git push origin/master master
issue로 pull request 보내고 master로 Pull 하기 : 추천 방식

push : git push origin issue
git request-pull origin issue
git checkout master
git fetch
git merge
Pull Request 보내기 : git request-pull origin/master issue


출처: https://midnightcow.tistory.com/135 [밤소의 잠못드는 밤 IOT 이야기]


=====================================
=====================================


<<< npm 명령어 >>>
npm을 사용하기 위해서는 몇가지 명령어를 알아둘 필요가 있는데, 프론트엔드 개발을 위해서 사용하는 npm 명령어는 대표적으로 아래와 같습니다.

npm init : package.json 생성
npm install : package.json 파일 및 해당 종속성에 나열된 모든 모듈을 설치
npm install package_name@버전 : 특정 패키지의 특정 버전 설치
npm install 주소 : 특정 저장소 내 패키지 설치. 주로 github을 이와 같이 설치합니다.
npm install package_name -g : 옵션. 글로벌로 설치. 로컬의 다른 프로젝트도 이 패키지를 사용 가능하게 됩니다.
npm uninstall : 패키지 삭제 명령어입니다.
npm update : 설치한 패키지들을 업데이트해줍니다.
npm dedupe : 중복 설치된 패키지들을 정리해주는 명령어입니다.


=====================================
=====================================


<<< yarn 명령어 >>>
yarn init : package.json 생성
yarn or yarn install : package.json 파일 및 해당 종속성에 나열된 모든 모듈을 설치
yarn add package_name@버전 : 특정 패키지의 특정 버전 설치
yarn add 주소 : 특정 저장소 내 패키지 설치. 주로 github을 이와 같이 설치합니다.
yarn global add package_name : 옵션. 글로벌로 설치. 로컬의 다른 프로젝트도 이 패키지를 사용 가능하게 됩니다.
yarn remove : 패키지 삭제 명령어입니다.
yarn upgrade : 설치한 패키지들을 업데이트해줍니다.
npm dedupe : 중복 설치된 패키지들을 정리해주는 명령어입니다.


출처: https://velog.io/@kysung95/%EA%B0%9C%EB%B0%9C%EC%83%81%EC%8B%9D-npm%EA%B3%BC-yarn
